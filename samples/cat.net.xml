<?xml version="1.0" encoding="utf-8"?>
<Report xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Analysis>
    <AnalysisEngineVersion>1.0.3456.10953</AnalysisEngineVersion>
    <StartTimeStamp>Wednesday, February 06, 2013 6:51:00 PM</StartTimeStamp>
    <StopTimeStamp>Wednesday, February 06, 2013 6:51:03 PM</StopTimeStamp>
    <ElapsedTime>00:00:03.3833383</ElapsedTime>
    <User>COVERITY\dpoirot</User>
    <DataFlowSuperGraph>
      <Nodes>17611</Nodes>
      <Edges>23180</Edges>
    </DataFlowSuperGraph>
    <Targets>
      <Target>C:\work_651\ELMAH-1.2-sp2-src\bin\net-2.0\Debug\elmah.dll</Target>
    </Targets>
  </Analysis>
  <Rules>
    <Rule>
      <Name>Redirection to User Controlled Site</Name>
      <Identifier>ACESEC06</Identifier>
      <TotalResults>0</TotalResults>
      <Results />
    </Rule>
    <Rule>
      <Name>Cross-Site Scripting</Name>
      <Identifier>ACESEC05</Identifier>
      <TotalResults>12</TotalResults>
      <Results>
        <Result>
          <Identifier>97ec72cf-525f-468a-9d80-ef7947f2954c</Identifier>
          <ResulstHash>I/ru4jCXy7qlFX9kuS+O7Wf07jI=</ResulstHash>
          <Color>3</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_QueryString()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason>External call to non-system method, cannot verify data taints result.</ConfidenceReason>
          <ConfidenceLevel>Low</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorHtmlPage.cs:52 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		ErrorHtmlPage.cs:74.</ProblemDescription>
          <Transformations>
            <Origin line="52" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorHtmlPage.cs">
              <StatementMethod>Elmah.ErrorHtmlPage.Render</StatementMethod>
              <Statement>string errorId = Mask.NullString(this.Request.QueryString["id"]);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="52" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorHtmlPage.cs">
              <StatementMethod>Elmah.ErrorHtmlPage.Render</StatementMethod>
              <Statement>string errorId = Mask.NullString(this.Request.QueryString["id"]);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from HttpRequest.get_QueryString</ActualInputVariable>
              <Method>System.Collections.Specialized.NameValueCollection.get_Item</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <CallResult line="52" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorHtmlPage.cs">
              <StatementMethod>Elmah.ErrorHtmlPage.Render</StatementMethod>
              <Statement>string errorId = Mask.NullString(this.Request.QueryString["id"]);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorId</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from NameValueCollection.get_Item</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <CallResult line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorHtmlPage.cs">
              <StatementMethod>Elmah.ErrorHtmlPage.Render</StatementMethod>
              <Statement>ErrorLogEntry errorEntry = this.ErrorLog.GetError(errorId);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorEntry</OutputVariable>
              <InputVariable>errorId</InputVariable>
              <ActualInputVariable>errorId</ActualInputVariable>
              <Method>Elmah.ErrorLog.GetError</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <CallResult line="74" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorHtmlPage.cs">
              <StatementMethod>Elmah.ErrorHtmlPage.Render</StatementMethod>
              <Statement>writer.Write(errorEntry.Error.WebHostHtmlMessage);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorEntry</InputVariable>
              <ActualInputVariable>Return from ErrorLog.GetError</ActualInputVariable>
              <Method>Elmah.ErrorLogEntry.get_Error</Method>
              <Argument>errorEntry</Argument>
            </CallResult>
            <CallResult line="74" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorHtmlPage.cs">
              <StatementMethod>Elmah.ErrorHtmlPage.Render</StatementMethod>
              <Statement>writer.Write(errorEntry.Error.WebHostHtmlMessage);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from ErrorLogEntry.get_Error</ActualInputVariable>
              <Method>Elmah.Error.get_WebHostHtmlMessage</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <MethodBoundary line="74" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorHtmlPage.cs">
              <StatementMethod>Elmah.ErrorHtmlPage.Render</StatementMethod>
              <Statement>writer.Write(errorEntry.Error.WebHostHtmlMessage);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Error.get_WebHostHtmlMessage</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>e112c608-2805-40a3-b33b-836ccc45ea27</Identifier>
          <ResulstHash>IGZZorT+EUMiOk2mjPbiCev0NAQ=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		JsonTextWriter.cs:158.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>urlTemplate</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>stack0</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <CallResult line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>urlTemplate</InputVariable>
              <ActualInputVariable>urlTemplate</ActualInputVariable>
              <Method>System.String.Format</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from String.Format</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="158" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>writer.Write(text);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>9047f415-e526-419b-b910-3b9fa13b04d1</Identifier>
          <ResulstHash>HEIA2zEsyOrgXAi0DVwd+9tLI44=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		JsonTextWriter.cs:277.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>urlTemplate</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>stack0</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <CallResult line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>urlTemplate</InputVariable>
              <ActualInputVariable>urlTemplate</ActualInputVariable>
              <Method>System.String.Format</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from String.Format</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="156" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>Enquote(text, writer);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.Enquote</Method>
            </MethodBoundary>
            <CallResult line="246" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>ch = s[index];</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>ch</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>s</ActualInputVariable>
              <Method>System.String.get_Chars</Method>
              <Argument>s</Argument>
            </CallResult>
            <CallResult line="277" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(((int)ch).ToString("x4", CultureInfo.InvariantCulture));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>ch</InputVariable>
              <ActualInputVariable>ch</ActualInputVariable>
              <Method>System.Int32.ToString</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="277" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(((int)ch).ToString("x4", CultureInfo.InvariantCulture));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Int32.ToString</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>a439d2c3-7ddd-4e06-b969-b48a5462c724</Identifier>
          <ResulstHash>hcufb8sLJx+JQ5QaCu7I+y2vhXc=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		ErrorLogDownloadHandler.cs:583.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>stack1</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</Method>
            </MethodBoundary>
            <MethodBoundary line="583" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>4cd84e35-1074-43e7-bcc7-493311565ca0</Identifier>
          <ResulstHash>hcufb8sLJx+JQ5QaCu7I+y2vhXc=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		ErrorLogDownloadHandler.cs:583.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>stack1</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</Method>
            </MethodBoundary>
            <MethodBoundary line="583" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>a9b46929-bb2b-405e-b773-e403b1f7d713</Identifier>
          <ResulstHash>hcufb8sLJx+JQ5QaCu7I+y2vhXc=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		ErrorLogDownloadHandler.cs:583.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>stack1</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</Method>
            </MethodBoundary>
            <MethodBoundary line="583" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>3b03e013-de0e-4879-824b-e6738f46fe93</Identifier>
          <ResulstHash>9LienMc/2bO/CPd3Xl2XLQVwDvs=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		ErrorLogDownloadHandler.cs:595.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>stack1</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</Method>
            </MethodBoundary>
            <CallResult line="595" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value.Replace(quote, quote + quote));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>System.String.Replace</Method>
              <Argument>value</Argument>
            </CallResult>
            <MethodBoundary line="595" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value.Replace(quote, quote + quote));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from String.Replace</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>b880f21b-d361-45d2-8904-7db5319cce05</Identifier>
          <ResulstHash>9LienMc/2bO/CPd3Xl2XLQVwDvs=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		ErrorLogDownloadHandler.cs:595.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>stack1</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</Method>
            </MethodBoundary>
            <CallResult line="595" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value.Replace(quote, quote + quote));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>System.String.Replace</Method>
              <Argument>value</Argument>
            </CallResult>
            <MethodBoundary line="595" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value.Replace(quote, quote + quote));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from String.Replace</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>180795a1-a59c-4cde-beb2-5211dbaa52a2</Identifier>
          <ResulstHash>9LienMc/2bO/CPd3Xl2XLQVwDvs=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		ErrorLogDownloadHandler.cs:595.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>stack1</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</Method>
            </MethodBoundary>
            <CallResult line="595" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value.Replace(quote, quote + quote));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>System.String.Replace</Method>
              <Argument>value</Argument>
            </CallResult>
            <MethodBoundary line="595" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value.Replace(quote, quote + quote));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from String.Replace</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>37fbef62-a944-4fec-8600-5be38e96ca8d</Identifier>
          <ResulstHash>y0hD32JmlXhw1mP3QQNzt6ziNi8=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		JsonTextWriter.cs:254.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>urlTemplate</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>stack0</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <CallResult line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>urlTemplate</InputVariable>
              <ActualInputVariable>urlTemplate</ActualInputVariable>
              <Method>System.String.Format</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from String.Format</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="156" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>Enquote(text, writer);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.Enquote</Method>
            </MethodBoundary>
            <CallResult line="246" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>ch = s[index];</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>ch</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>s</ActualInputVariable>
              <Method>System.String.get_Chars</Method>
              <Argument>s</Argument>
            </CallResult>
            <MethodBoundary line="254" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(ch);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>ch</InputVariable>
              <ActualInputVariable>ch</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>5ed79e7b-a2ae-4a95-bff8-ebef25afd809</Identifier>
          <ResulstHash>y0hD32JmlXhw1mP3QQNzt6ziNi8=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		JsonTextWriter.cs:262.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>urlTemplate</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>stack0</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <CallResult line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>urlTemplate</InputVariable>
              <ActualInputVariable>urlTemplate</ActualInputVariable>
              <Method>System.String.Format</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from String.Format</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="156" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>Enquote(text, writer);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.Enquote</Method>
            </MethodBoundary>
            <CallResult line="246" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>ch = s[index];</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>ch</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>s</ActualInputVariable>
              <Method>System.String.get_Chars</Method>
              <Argument>s</Argument>
            </CallResult>
            <MethodBoundary line="262" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(ch);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>ch</InputVariable>
              <ActualInputVariable>ch</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>127f807d-b056-4853-b4bb-43bc714faf37</Identifier>
          <ResulstHash>y0hD32JmlXhw1mP3QQNzt6ziNi8=</ResulstHash>
          <Color>16</Color>
          <Vector>WebRequest</Vector>
          <EntryPoint>stack0 := stack0.{System.Web.HttpRequest}get_Url()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Use the Anti-XSS library to properly encode the data before rendering it</Resolution>
          <ProblemDescription>A cross-site scripting vulnerability was found through
		a user controlled variable that enters the application at
		ErrorLogPageFactory.cs:217 through the variable stack0 which
		eventually leads to a cross-site scripting issue at
		JsonTextWriter.cs:281.</ProblemDescription>
          <Transformations>
            <Origin line="217" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>return url != null ? url : context.Request.Url;</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <ReturnData line="218" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPageFactory.cs">
              <StatementMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>requestUrl</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>url</ActualInputVariable>
              <FromMethod>Elmah.ErrorLogPageFactory.GetRequestUrl</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>requestUrl</InputVariable>
              <ActualInputVariable>requestUrl</ActualInputVariable>
              <Method>System.Uri..ctor</Method>
            </MethodBoundary>
            <CallResult line="399" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>string urlTemplate = new Uri(requestUrl, "{0}?id=" + HttpUtility.UrlEncode(entry.Id)).ToString();</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>urlTemplate</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>stack0</ActualInputVariable>
              <Method>System.Object.ToString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <CallResult line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>urlTemplate</InputVariable>
              <ActualInputVariable>urlTemplate</ActualInputVariable>
              <Method>System.String.Format</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="403" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+JsonPaddingFormat.Entries</StatementMethod>
              <Statement>json.Member("hrefs")</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from String.Format</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="156" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>Enquote(text, writer);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.Enquote</Method>
            </MethodBoundary>
            <CallResult line="246" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>ch = s[index];</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>ch</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>s</ActualInputVariable>
              <Method>System.String.get_Chars</Method>
              <Argument>s</Argument>
            </CallResult>
            <MethodBoundary line="281" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(ch);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>ch</InputVariable>
              <ActualInputVariable>ch</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
      </Results>
    </Rule>
    <Rule>
      <Name>SQL Injection</Name>
      <Identifier>ACESEC01</Identifier>
      <TotalResults>0</TotalResults>
      <Results />
    </Rule>
    <Rule>
      <Name>LDAP Injection</Name>
      <Identifier>ACESEC08</Identifier>
      <TotalResults>0</TotalResults>
      <Results />
    </Rule>
    <Rule>
      <Name>XPath Injection</Name>
      <Identifier>ACESEC07</Identifier>
      <TotalResults>0</TotalResults>
      <Results />
    </Rule>
    <Rule>
      <Name>Exception Information</Name>
      <Identifier>ACESEC04</Identifier>
      <TotalResults>25</TotalResults>
      <Results>
        <Result>
          <Identifier>5217539a-8699-4f74-9e69-f25604892dc6</Identifier>
          <ResulstHash>Mb1W0ry2l7j2p0Th9b50KUycFrU=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorDigestRssHandler.cs:195.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.SqlErrorLog.ReadSingleXmlStringResult</ToMethod>
            </ReturnData>
            <ReturnData line="236" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ReadSingleXmlStringResult</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>xml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.SqlErrorLog.ReadSingleXmlStringResult</FromMethod>
              <ToMethod>Elmah.SqlErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="186" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.GetErrors</StatementMethod>
              <Statement>ErrorsXmlToList(xml, errorEntryList);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>xml</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>Elmah.SqlErrorLog.ErrorsXmlToList</Method>
            </MethodBoundary>
            <MethodBoundary line="331" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ErrorsXmlToList</StatementMethod>
              <Statement>using (XmlReader reader = XmlReader.Create(new StringReader(xml), settings))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <CallResult line="331" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ErrorsXmlToList</StatementMethod>
              <Statement>using (XmlReader reader = XmlReader.Create(new StringReader(xml), settings))</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>reader</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>stack0</ActualInputVariable>
              <Method>System.Xml.XmlReader.Create</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <MethodBoundary line="332" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ErrorsXmlToList</StatementMethod>
              <Statement>ErrorsXmlToList(reader, errorEntryList);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>reader</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.SqlErrorLog.ErrorsXmlToList</Method>
            </MethodBoundary>
            <MethodBoundary line="364" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ErrorsXmlToList</StatementMethod>
              <Statement>Error error = ErrorXml.Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="132" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.Message = reader.GetAttribute("message");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="132" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.Message = reader.GetAttribute("message");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorDigestRssHandler.Render</ToMethod>
            </ReturnData>
            <CallResult line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>1f3966d3-a200-4953-bb58-41e2dcaa462f</Identifier>
          <ResulstHash>LxNw9uEE5kmR1Da9+mG2h2EVarw=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorDigestRssHandler.cs:195.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="286" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetErrors</StatementMethod>
              <Statement>error.Message = reader["Message"].ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorDigestRssHandler.Render</ToMethod>
            </ReturnData>
            <CallResult line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>edaf5d24-654c-4646-8c04-113c3072c942</Identifier>
          <ResulstHash>mlWgCfe5yAMzjQI93t3JfhU8MO8=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorDigestRssHandler.cs:195.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorDigestRssHandler.Render</ToMethod>
            </ReturnData>
            <CallResult line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>ed33a39a-9c02-45d9-97ac-a385510bb5bc</Identifier>
          <ResulstHash>nE49qcpE1Ve2H6dvwqvkm058Dn0=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorDigestRssHandler.cs:195.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.AccessErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="249" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\AccessErrorLog.cs">
              <StatementMethod>Elmah.AccessErrorLog.GetErrors</StatementMethod>
              <Statement>error.Message = reader["Message"].ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorDigestRssHandler.Render</ToMethod>
            </ReturnData>
            <CallResult line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>0614097a-eb57-4261-927a-ac0b066e7089</Identifier>
          <ResulstHash>Ur5bo0fePtdJL8Ui8xIP8doW8Gw=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorDigestRssHandler.cs:195.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.SQLiteErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="271" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SQLiteErrorLog.cs">
              <StatementMethod>Elmah.SQLiteErrorLog.GetErrors</StatementMethod>
              <Statement>error.Message = reader["Message"].ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorDigestRssHandler.Render</ToMethod>
            </ReturnData>
            <CallResult line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>bfa743bf-0ed4-4f96-83d4-a74f2732d034</Identifier>
          <ResulstHash>EalRh6vVQbysq5Gnbr7Y/+jg+K0=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorDigestRssHandler.cs:195.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.SqlServerCompactErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="297" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlServerCompactErrorLog.cs">
              <StatementMethod>Elmah.SqlServerCompactErrorLog.GetErrors</StatementMethod>
              <Statement>error.Message = reader["Message"].ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorDigestRssHandler.Render</ToMethod>
            </ReturnData>
            <CallResult line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="195" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorDigestRssHandler.cs">
              <StatementMethod>Elmah.ErrorDigestRssHandler.Render</StatementMethod>
              <Statement>Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>70081323-25fa-401f-886e-137c88eb510a</Identifier>
          <ResulstHash>jroU4QVGL5v4H3y8k8t/8338KWk=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorRssHandler.cs:106.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.SQLiteErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="271" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SQLiteErrorLog.cs">
              <StatementMethod>Elmah.SQLiteErrorLog.GetErrors</StatementMethod>
              <Statement>error.Message = reader["Message"].ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorRssHandler.ProcessRequest</ToMethod>
            </ReturnData>
            <CallResult line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>89071c1b-4cfe-46ad-997f-6db946d5d3d1</Identifier>
          <ResulstHash>s7hLNWo0cG2yN/3tCiPbwEckoH0=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorRssHandler.cs:106.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.SqlServerCompactErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="297" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlServerCompactErrorLog.cs">
              <StatementMethod>Elmah.SqlServerCompactErrorLog.GetErrors</StatementMethod>
              <Statement>error.Message = reader["Message"].ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorRssHandler.ProcessRequest</ToMethod>
            </ReturnData>
            <CallResult line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>5cd625be-4869-4de6-bb30-a591fab7e7ef</Identifier>
          <ResulstHash>RRYocdH/IHEatXcMC//KbD9LLAY=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorRssHandler.cs:106.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.AccessErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="249" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\AccessErrorLog.cs">
              <StatementMethod>Elmah.AccessErrorLog.GetErrors</StatementMethod>
              <Statement>error.Message = reader["Message"].ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorRssHandler.ProcessRequest</ToMethod>
            </ReturnData>
            <CallResult line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>e17f90d3-257d-4ad3-a6e2-8a94751d4630</Identifier>
          <ResulstHash>ussoKnrIqOx7DRndmKOWha6XAK8=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorRssHandler.cs:106.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="286" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetErrors</StatementMethod>
              <Statement>error.Message = reader["Message"].ToString();</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorRssHandler.ProcessRequest</ToMethod>
            </ReturnData>
            <CallResult line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>e76aff42-b995-4b3a-9a4a-de278fd99da8</Identifier>
          <ResulstHash>3O7PuoQfrSlOFvdt0l6LS0rcSqI=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorRssHandler.cs:106.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorRssHandler.ProcessRequest</ToMethod>
            </ReturnData>
            <CallResult line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>7be08378-708c-42bc-abe0-25a8476f9668</Identifier>
          <ResulstHash>jyRZd/9fSXxe0KXYgRO/rAka0Eo=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorRssHandler.cs:106.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.SqlErrorLog.ReadSingleXmlStringResult</ToMethod>
            </ReturnData>
            <ReturnData line="236" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ReadSingleXmlStringResult</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>xml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.SqlErrorLog.ReadSingleXmlStringResult</FromMethod>
              <ToMethod>Elmah.SqlErrorLog.GetErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="186" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.GetErrors</StatementMethod>
              <Statement>ErrorsXmlToList(xml, errorEntryList);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>xml</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>Elmah.SqlErrorLog.ErrorsXmlToList</Method>
            </MethodBoundary>
            <MethodBoundary line="331" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ErrorsXmlToList</StatementMethod>
              <Statement>using (XmlReader reader = XmlReader.Create(new StringReader(xml), settings))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <CallResult line="331" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ErrorsXmlToList</StatementMethod>
              <Statement>using (XmlReader reader = XmlReader.Create(new StringReader(xml), settings))</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>reader</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>stack0</ActualInputVariable>
              <Method>System.Xml.XmlReader.Create</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <MethodBoundary line="332" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ErrorsXmlToList</StatementMethod>
              <Statement>ErrorsXmlToList(reader, errorEntryList);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>reader</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.SqlErrorLog.ErrorsXmlToList</Method>
            </MethodBoundary>
            <MethodBoundary line="364" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\SqlErrorLog.cs">
              <StatementMethod>Elmah.SqlErrorLog.ErrorsXmlToList</StatementMethod>
              <Statement>Error error = ErrorXml.Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="132" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.Message = reader.GetAttribute("message");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="132" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.Message = reader.GetAttribute("message");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.Error.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="350" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <FromMethod>Elmah.Error.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.XmlSerializer.Serialize</ToMethod>
            </ReturnData>
            <ReturnData line="49" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\XmlSerializer.cs">
              <StatementMethod>Elmah.XmlSerializer.Serialize</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.XmlSerializer.Serialize</FromMethod>
              <ToMethod>Elmah.ErrorRssHandler.ProcessRequest</ToMethod>
            </ReturnData>
            <CallResult line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlSerializer.Serialize</ActualInputVariable>
              <Method>Elmah.XmlText.StripIllegalXmlCharacters</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="106" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorRssHandler.cs">
              <StatementMethod>Elmah.ErrorRssHandler.ProcessRequest</StatementMethod>
              <Statement>context.Response.Write(XmlText.StripIllegalXmlCharacters(XmlSerializer.Serialize(rss)));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from XmlText.StripIllegalXmlCharacters</ActualInputVariable>
              <Method>System.Web.HttpResponse.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>83035087-6cb0-413b-b24f-20c8c6f84dbb</Identifier>
          <ResulstHash>W6roNGFpaNeSofArx6aeFpAFD9w=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorHtmlPage.cs:74.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorXml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetError</ToMethod>
            </ReturnData>
            <MethodBoundary line="354" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetError</StatementMethod>
              <Statement>Error error = ErrorXml.DecodeString(errorXml);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorXml</InputVariable>
              <ActualInputVariable>errorXml</ActualInputVariable>
              <Method>Elmah.ErrorXml.DecodeString</Method>
            </MethodBoundary>
            <MethodBoundary line="62" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>using (StringReader sr = new StringReader(xml))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="64" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>XmlTextReader reader = new XmlTextReader(sr);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>sr</ActualInputVariable>
              <Method>System.Xml.XmlTextReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="69" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>return Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="140" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.WebHostHtmlMessage = reader.GetAttribute("webHostHtmlMessage");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="140" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.WebHostHtmlMessage = reader.GetAttribute("webHostHtmlMessage");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_WebHostHtmlMessage</Method>
            </MethodBoundary>
            <PropertyIndirection line="300" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_WebHostHtmlMessage</StatementMethod>
              <Statement>set { _webHostHtmlMessage = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._webHostHtmlMessage</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="299" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_WebHostHtmlMessage</StatementMethod>
              <Statement>get { return Mask.NullString(_webHostHtmlMessage); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._webHostHtmlMessage</InputVariable>
              <ActualInputVariable>Elmah.Error._webHostHtmlMessage</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="299" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_WebHostHtmlMessage</StatementMethod>
              <Statement>get { return Mask.NullString(_webHostHtmlMessage); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_WebHostHtmlMessage</FromMethod>
              <ToMethod>Elmah.ErrorHtmlPage.Render</ToMethod>
            </ReturnData>
            <MethodBoundary line="74" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorHtmlPage.cs">
              <StatementMethod>Elmah.ErrorHtmlPage.Render</StatementMethod>
              <Statement>writer.Write(errorEntry.Error.WebHostHtmlMessage);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Error.get_WebHostHtmlMessage</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>878da012-d206-439b-950c-e0a192e049cf</Identifier>
          <ResulstHash>BvfmvpDOWdl5sjMpOszwhkKaH+I=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		JsonTextWriter.cs:158.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorXml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetError</ToMethod>
            </ReturnData>
            <MethodBoundary line="354" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetError</StatementMethod>
              <Statement>Error error = ErrorXml.DecodeString(errorXml);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorXml</InputVariable>
              <ActualInputVariable>errorXml</ActualInputVariable>
              <Method>Elmah.ErrorXml.DecodeString</Method>
            </MethodBoundary>
            <MethodBoundary line="62" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>using (StringReader sr = new StringReader(xml))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="64" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>XmlTextReader reader = new XmlTextReader(sr);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>sr</ActualInputVariable>
              <Method>System.Xml.XmlTextReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="69" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>return Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_ApplicationName</Method>
            </MethodBoundary>
            <PropertyIndirection line="201" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_ApplicationName</StatementMethod>
              <Statement>set { _applicationName = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._applicationName</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._applicationName</InputVariable>
              <ActualInputVariable>Elmah.Error._applicationName</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_ApplicationName</FromMethod>
              <ToMethod>Elmah.ErrorJson.Encode</ToMethod>
            </ReturnData>
            <MethodBoundary line="108" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Encode</StatementMethod>
              <Statement>Member(writer, "application", error.ApplicationName);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>Return from Error.get_ApplicationName</ActualInputVariable>
              <Method>Elmah.ErrorJson.Member</Method>
            </MethodBoundary>
            <MethodBoundary line="148" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Member</StatementMethod>
              <Statement>writer.Member(name).String(value);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="158" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>writer.Write(text);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>1bd211c9-fa5b-4d8c-9b84-6bfe8798c009</Identifier>
          <ResulstHash>SC8Shrr6xDvS+40zlXAK8fR0lmU=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		JsonTextWriter.cs:277.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorXml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetError</ToMethod>
            </ReturnData>
            <MethodBoundary line="354" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetError</StatementMethod>
              <Statement>Error error = ErrorXml.DecodeString(errorXml);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorXml</InputVariable>
              <ActualInputVariable>errorXml</ActualInputVariable>
              <Method>Elmah.ErrorXml.DecodeString</Method>
            </MethodBoundary>
            <MethodBoundary line="62" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>using (StringReader sr = new StringReader(xml))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="64" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>XmlTextReader reader = new XmlTextReader(sr);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>sr</ActualInputVariable>
              <Method>System.Xml.XmlTextReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="69" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>return Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_ApplicationName</Method>
            </MethodBoundary>
            <PropertyIndirection line="201" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_ApplicationName</StatementMethod>
              <Statement>set { _applicationName = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._applicationName</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._applicationName</InputVariable>
              <ActualInputVariable>Elmah.Error._applicationName</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_ApplicationName</FromMethod>
              <ToMethod>Elmah.ErrorJson.Encode</ToMethod>
            </ReturnData>
            <MethodBoundary line="108" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Encode</StatementMethod>
              <Statement>Member(writer, "application", error.ApplicationName);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>Return from Error.get_ApplicationName</ActualInputVariable>
              <Method>Elmah.ErrorJson.Member</Method>
            </MethodBoundary>
            <MethodBoundary line="148" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Member</StatementMethod>
              <Statement>writer.Member(name).String(value);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="156" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>Enquote(text, writer);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.Enquote</Method>
            </MethodBoundary>
            <CallResult line="246" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>ch = s[index];</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>ch</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>s</ActualInputVariable>
              <Method>System.String.get_Chars</Method>
              <Argument>s</Argument>
            </CallResult>
            <CallResult line="277" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(((int)ch).ToString("x4", CultureInfo.InvariantCulture));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>ch</InputVariable>
              <ActualInputVariable>ch</ActualInputVariable>
              <Method>System.Int32.ToString</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="277" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(((int)ch).ToString("x4", CultureInfo.InvariantCulture));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Int32.ToString</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>8344774a-2d0a-4824-93c6-7a0322c55195</Identifier>
          <ResulstHash>1GP5WjPIt1P7nJDUZ938uOWTV8Y=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorLogDownloadHandler.cs:305.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="305" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>Context.Response.Output.Write(writer.ToString());</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>9ea9fc83-9d40-4ea1-9bd3-382f589603f1</Identifier>
          <ResulstHash>fJsxCLWgRyB6RIWb56eIHQu6sek=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorLogDownloadHandler.cs:305.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="305" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>Context.Response.Output.Write(writer.ToString());</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>c1389cde-6ed5-4542-969a-d1f4b002e6db</Identifier>
          <ResulstHash>MHcBLVtUGGz4sKyUo00NVwyT9nM=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorLogDownloadHandler.cs:583.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</Method>
            </MethodBoundary>
            <MethodBoundary line="583" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>5b920542-d7c9-4cfa-a72d-6e14890c36d1</Identifier>
          <ResulstHash>WhJbWGshEf40Ki0m9AhL3kFzh3s=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorLogDownloadHandler.cs:595.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</ToMethod>
            </ReturnData>
            <MethodBoundary line="290" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvFormat.Entries</StatementMethod>
              <Statement>csv.Field(error.ApplicationName)</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <Method>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</Method>
            </MethodBoundary>
            <CallResult line="595" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value.Replace(quote, quote + quote));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>System.String.Replace</Method>
              <Argument>value</Argument>
            </CallResult>
            <MethodBoundary line="595" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogDownloadHandler.cs">
              <StatementMethod>Elmah.ErrorLogDownloadHandler+CsvWriter.Field</StatementMethod>
              <Statement>_writer.Write(value.Replace(quote, quote + quote));</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from String.Replace</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>01b7d6d4-4c18-4f30-b1eb-defa2dba6bfd</Identifier>
          <ResulstHash>R0kjPZUauQc9LErEQcMDbGzCkQg=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		JsonTextWriter.cs:254.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorXml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetError</ToMethod>
            </ReturnData>
            <MethodBoundary line="354" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetError</StatementMethod>
              <Statement>Error error = ErrorXml.DecodeString(errorXml);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorXml</InputVariable>
              <ActualInputVariable>errorXml</ActualInputVariable>
              <Method>Elmah.ErrorXml.DecodeString</Method>
            </MethodBoundary>
            <MethodBoundary line="62" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>using (StringReader sr = new StringReader(xml))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="64" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>XmlTextReader reader = new XmlTextReader(sr);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>sr</ActualInputVariable>
              <Method>System.Xml.XmlTextReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="69" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>return Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_ApplicationName</Method>
            </MethodBoundary>
            <PropertyIndirection line="201" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_ApplicationName</StatementMethod>
              <Statement>set { _applicationName = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._applicationName</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._applicationName</InputVariable>
              <ActualInputVariable>Elmah.Error._applicationName</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_ApplicationName</FromMethod>
              <ToMethod>Elmah.ErrorJson.Encode</ToMethod>
            </ReturnData>
            <MethodBoundary line="108" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Encode</StatementMethod>
              <Statement>Member(writer, "application", error.ApplicationName);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>Return from Error.get_ApplicationName</ActualInputVariable>
              <Method>Elmah.ErrorJson.Member</Method>
            </MethodBoundary>
            <MethodBoundary line="148" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Member</StatementMethod>
              <Statement>writer.Member(name).String(value);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="156" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>Enquote(text, writer);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.Enquote</Method>
            </MethodBoundary>
            <CallResult line="246" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>ch = s[index];</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>ch</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>s</ActualInputVariable>
              <Method>System.String.get_Chars</Method>
              <Argument>s</Argument>
            </CallResult>
            <MethodBoundary line="254" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(ch);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>ch</InputVariable>
              <ActualInputVariable>ch</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>a032bd6f-1a2c-4d02-a30e-16dffba8bcf8</Identifier>
          <ResulstHash>R0kjPZUauQc9LErEQcMDbGzCkQg=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		JsonTextWriter.cs:262.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorXml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetError</ToMethod>
            </ReturnData>
            <MethodBoundary line="354" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetError</StatementMethod>
              <Statement>Error error = ErrorXml.DecodeString(errorXml);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorXml</InputVariable>
              <ActualInputVariable>errorXml</ActualInputVariable>
              <Method>Elmah.ErrorXml.DecodeString</Method>
            </MethodBoundary>
            <MethodBoundary line="62" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>using (StringReader sr = new StringReader(xml))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="64" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>XmlTextReader reader = new XmlTextReader(sr);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>sr</ActualInputVariable>
              <Method>System.Xml.XmlTextReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="69" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>return Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_ApplicationName</Method>
            </MethodBoundary>
            <PropertyIndirection line="201" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_ApplicationName</StatementMethod>
              <Statement>set { _applicationName = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._applicationName</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._applicationName</InputVariable>
              <ActualInputVariable>Elmah.Error._applicationName</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_ApplicationName</FromMethod>
              <ToMethod>Elmah.ErrorJson.Encode</ToMethod>
            </ReturnData>
            <MethodBoundary line="108" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Encode</StatementMethod>
              <Statement>Member(writer, "application", error.ApplicationName);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>Return from Error.get_ApplicationName</ActualInputVariable>
              <Method>Elmah.ErrorJson.Member</Method>
            </MethodBoundary>
            <MethodBoundary line="148" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Member</StatementMethod>
              <Statement>writer.Member(name).String(value);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="156" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>Enquote(text, writer);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.Enquote</Method>
            </MethodBoundary>
            <CallResult line="246" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>ch = s[index];</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>ch</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>s</ActualInputVariable>
              <Method>System.String.get_Chars</Method>
              <Argument>s</Argument>
            </CallResult>
            <MethodBoundary line="262" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(ch);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>ch</InputVariable>
              <ActualInputVariable>ch</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>addbddfe-398b-4ebc-b719-14879c9be261</Identifier>
          <ResulstHash>R0kjPZUauQc9LErEQcMDbGzCkQg=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		JsonTextWriter.cs:281.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorXml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetError</ToMethod>
            </ReturnData>
            <MethodBoundary line="354" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetError</StatementMethod>
              <Statement>Error error = ErrorXml.DecodeString(errorXml);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorXml</InputVariable>
              <ActualInputVariable>errorXml</ActualInputVariable>
              <Method>Elmah.ErrorXml.DecodeString</Method>
            </MethodBoundary>
            <MethodBoundary line="62" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>using (StringReader sr = new StringReader(xml))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="64" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>XmlTextReader reader = new XmlTextReader(sr);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>sr</ActualInputVariable>
              <Method>System.Xml.XmlTextReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="69" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>return Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="129" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.ApplicationName = reader.GetAttribute("application");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_ApplicationName</Method>
            </MethodBoundary>
            <PropertyIndirection line="201" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_ApplicationName</StatementMethod>
              <Statement>set { _applicationName = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._applicationName</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._applicationName</InputVariable>
              <ActualInputVariable>Elmah.Error._applicationName</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="200" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_ApplicationName</StatementMethod>
              <Statement>get { return Mask.NullString(_applicationName); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_ApplicationName</FromMethod>
              <ToMethod>Elmah.ErrorJson.Encode</ToMethod>
            </ReturnData>
            <MethodBoundary line="108" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Encode</StatementMethod>
              <Statement>Member(writer, "application", error.ApplicationName);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>Return from Error.get_ApplicationName</ActualInputVariable>
              <Method>Elmah.ErrorJson.Member</Method>
            </MethodBoundary>
            <MethodBoundary line="148" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorJson.cs">
              <StatementMethod>Elmah.ErrorJson.Member</StatementMethod>
              <Statement>writer.Member(name).String(value);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.String</Method>
            </MethodBoundary>
            <MethodBoundary line="172" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.String</StatementMethod>
              <Statement>return str == null ? Null() : WriteEnquoted(str);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>str</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteEnquoted</Method>
            </MethodBoundary>
            <MethodBoundary line="127" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteEnquoted</StatementMethod>
              <Statement>return WriteImpl(text, /* raw */ true);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.WriteImpl</Method>
            </MethodBoundary>
            <MethodBoundary line="156" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.WriteImpl</StatementMethod>
              <Statement>Enquote(text, writer);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>text</ActualInputVariable>
              <Method>Elmah.JsonTextWriter.Enquote</Method>
            </MethodBoundary>
            <CallResult line="246" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>ch = s[index];</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>ch</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>s</ActualInputVariable>
              <Method>System.String.get_Chars</Method>
              <Argument>s</Argument>
            </CallResult>
            <MethodBoundary line="281" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\JsonTextWriter.cs">
              <StatementMethod>Elmah.JsonTextWriter.Enquote</StatementMethod>
              <Statement>writer.Write(ch);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>ch</InputVariable>
              <ActualInputVariable>ch</ActualInputVariable>
              <Method>System.IO.TextWriter.Write</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>b5d8436d-7823-4bf0-a992-04dba81da202</Identifier>
          <ResulstHash>CQWXEJHugIdBGFrkOIfd3vndZEY=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorLogPage.cs:390.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorXml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetError</ToMethod>
            </ReturnData>
            <MethodBoundary line="354" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetError</StatementMethod>
              <Statement>Error error = ErrorXml.DecodeString(errorXml);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorXml</InputVariable>
              <ActualInputVariable>errorXml</ActualInputVariable>
              <Method>Elmah.ErrorXml.DecodeString</Method>
            </MethodBoundary>
            <MethodBoundary line="62" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>using (StringReader sr = new StringReader(xml))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="64" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>XmlTextReader reader = new XmlTextReader(sr);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>sr</ActualInputVariable>
              <Method>System.Xml.XmlTextReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="69" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>return Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="132" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.Message = reader.GetAttribute("message");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="132" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.Message = reader.GetAttribute("message");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_Message</Method>
            </MethodBoundary>
            <PropertyIndirection line="241" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_Message</StatementMethod>
              <Statement>set { _message = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._message</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._message</InputVariable>
              <ActualInputVariable>Elmah.Error._message</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="240" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_Message</StatementMethod>
              <Statement>get { return Mask.NullString(_message); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_Message</FromMethod>
              <ToMethod>Elmah.ErrorLogPage.RenderErrors</ToMethod>
            </ReturnData>
            <CallResult line="390" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.RenderErrors</StatementMethod>
              <Statement>messageLabel.Text = this.Server.HtmlEncode(error.Message);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>Return from Error.get_Message</ActualInputVariable>
              <Method>System.Web.HttpServerUtility.HtmlEncode</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="390" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.RenderErrors</StatementMethod>
              <Statement>messageLabel.Text = this.Server.HtmlEncode(error.Message);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from HttpServerUtility.HtmlEncode</ActualInputVariable>
              <Method>System.Web.UI.WebControls.Label.set_Text</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>a4264bbe-1ad0-4713-b3ef-ff27ebc6ee70</Identifier>
          <ResulstHash>s4XNaGm2V7adNaigX9GVUifLyrU=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorLogPage.cs:451.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorXml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetError</ToMethod>
            </ReturnData>
            <MethodBoundary line="354" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetError</StatementMethod>
              <Statement>Error error = ErrorXml.DecodeString(errorXml);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorXml</InputVariable>
              <ActualInputVariable>errorXml</ActualInputVariable>
              <Method>Elmah.ErrorXml.DecodeString</Method>
            </MethodBoundary>
            <MethodBoundary line="62" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>using (StringReader sr = new StringReader(xml))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="64" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>XmlTextReader reader = new XmlTextReader(sr);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>sr</ActualInputVariable>
              <Method>System.Xml.XmlTextReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="69" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>return Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="135" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.User = reader.GetAttribute("user");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="135" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.User = reader.GetAttribute("user");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_User</Method>
            </MethodBoundary>
            <PropertyIndirection line="263" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_User</StatementMethod>
              <Statement>set { _user = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._user</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="262" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_User</StatementMethod>
              <Statement>get { return Mask.NullString(_user); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._user</InputVariable>
              <ActualInputVariable>Elmah.Error._user</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="262" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_User</StatementMethod>
              <Statement>get { return Mask.NullString(_user); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_User</FromMethod>
              <ToMethod>Elmah.ErrorLogPage.RenderErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="406" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.RenderErrors</StatementMethod>
              <Statement>bodyRow.Cells.Add(FormatCell(new TableCell(), error.User, "user-col"));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>Return from Error.get_User</ActualInputVariable>
              <Method>Elmah.ErrorLogPage.FormatCell</Method>
            </MethodBoundary>
            <MethodBoundary line="424" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.FormatCell</StatementMethod>
              <Statement>return FormatCell(cell, contents, cssClassName, string.Empty);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>contents</ActualInputVariable>
              <Method>Elmah.ErrorLogPage.FormatCell</Method>
            </MethodBoundary>
            <CallResult line="441" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.FormatCell</StatementMethod>
              <Statement>string encodedContents = this.Server.HtmlEncode(contents);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>encodedContents</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>contents</ActualInputVariable>
              <Method>System.Web.HttpServerUtility.HtmlEncode</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="451" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.FormatCell</StatementMethod>
              <Statement>label.Text = encodedContents;</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>encodedContents</InputVariable>
              <ActualInputVariable>encodedContents</ActualInputVariable>
              <Method>System.Web.UI.WebControls.Label.set_Text</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
        <Result>
          <Identifier>1414bf55-a83f-468f-b056-18a723ba877b</Identifier>
          <ResulstHash>eJbRwxMykaF+IGA3xpzWocF1ok8=</ResulstHash>
          <Color>22</Color>
          <Vector>Exception</Vector>
          <EntryPoint>stack0 := stack0.{System.Exception}get_Message()</EntryPoint>
          <EntryVariable>stack0</EntryVariable>
          <ConfidenceReason />
          <ConfidenceLevel>High</ConfidenceLevel>
          <Suppressed>false</Suppressed>
          <SuppressionType>None</SuppressionType>
          <Resolution>Do not provide the user with specific exception information</Resolution>
          <ProblemDescription>An information disclosure vulnerability was found through
		a exception information that enters the application at
		ErrorSignal.cs:152 through the variable stack0 which
		eventually leads to the disclosure of exception information at
		ErrorLogPage.cs:445.</ProblemDescription>
          <Transformations>
            <Origin line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
            </Origin>
            <CallResult line="152" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>return Mask.EmptyString(Exception.Message, Exception.GetType().FullName);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from Exception.get_Message</ActualInputVariable>
              <Method>Elmah.Mask.EmptyString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="153" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorSignal.cs">
              <StatementMethod>Elmah.ErrorSignalEventArgs.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.EmptyString</ActualInputVariable>
              <FromMethod>Elmah.ErrorSignalEventArgs.ToString</FromMethod>
              <ToMethod>Elmah.Assertions.DelegatedContextExpression.ToString</ToMethod>
            </ReturnData>
            <ReturnData line="57" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Assertions\DelegatedContextExpression.cs">
              <StatementMethod>Elmah.Assertions.DelegatedContextExpression.ToString</StatementMethod>
              <Statement>}</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>errorXml</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Object.ToString</ActualInputVariable>
              <FromMethod>Elmah.Assertions.DelegatedContextExpression.ToString</FromMethod>
              <ToMethod>Elmah.OracleErrorLog.GetError</ToMethod>
            </ReturnData>
            <MethodBoundary line="354" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\OracleErrorLog.cs">
              <StatementMethod>Elmah.OracleErrorLog.GetError</StatementMethod>
              <Statement>Error error = ErrorXml.DecodeString(errorXml);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>errorXml</InputVariable>
              <ActualInputVariable>errorXml</ActualInputVariable>
              <Method>Elmah.ErrorXml.DecodeString</Method>
            </MethodBoundary>
            <MethodBoundary line="62" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>using (StringReader sr = new StringReader(xml))</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>xml</ActualInputVariable>
              <Method>System.IO.StringReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="64" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>XmlTextReader reader = new XmlTextReader(sr);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>sr</ActualInputVariable>
              <Method>System.Xml.XmlTextReader..ctor</Method>
            </MethodBoundary>
            <MethodBoundary line="69" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.DecodeString</StatementMethod>
              <Statement>return Decode(reader);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.Decode</Method>
            </MethodBoundary>
            <MethodBoundary line="95" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.Decode</StatementMethod>
              <Statement>ReadXmlAttributes(reader, error);</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>Elmah.ErrorXml.ReadXmlAttributes</Method>
            </MethodBoundary>
            <CallResult line="135" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.User = reader.GetAttribute("user");</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>reader</ActualInputVariable>
              <Method>System.Xml.XmlReader.GetAttribute</Method>
              <Argument>reader</Argument>
            </CallResult>
            <MethodBoundary line="135" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorXml.cs">
              <StatementMethod>Elmah.ErrorXml.ReadXmlAttributes</StatementMethod>
              <Statement>error.User = reader.GetAttribute("user");</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>Return from XmlReader.GetAttribute</ActualInputVariable>
              <Method>Elmah.Error.set_User</Method>
            </MethodBoundary>
            <PropertyIndirection line="263" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.set_User</StatementMethod>
              <Statement>set { _user = value; }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>Elmah.Error._user</OutputVariable>
              <InputVariable>stack0</InputVariable>
              <ActualInputVariable>value</ActualInputVariable>
            </PropertyIndirection>
            <CallResult line="262" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_User</StatementMethod>
              <Statement>get { return Mask.NullString(_user); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>CS$1$0000</OutputVariable>
              <InputVariable>Elmah.Error._user</InputVariable>
              <ActualInputVariable>Elmah.Error._user</ActualInputVariable>
              <Method>Elmah.Mask.NullString</Method>
              <Argument>stack0</Argument>
            </CallResult>
            <ReturnData line="262" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\Error.cs">
              <StatementMethod>Elmah.Error.get_User</StatementMethod>
              <Statement>get { return Mask.NullString(_user); }</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>CS$1$0000</InputVariable>
              <ActualInputVariable>Return from Mask.NullString</ActualInputVariable>
              <FromMethod>Elmah.Error.get_User</FromMethod>
              <ToMethod>Elmah.ErrorLogPage.RenderErrors</ToMethod>
            </ReturnData>
            <MethodBoundary line="406" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.RenderErrors</StatementMethod>
              <Statement>bodyRow.Cells.Add(FormatCell(new TableCell(), error.User, "user-col"));</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack2</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>Return from Error.get_User</ActualInputVariable>
              <Method>Elmah.ErrorLogPage.FormatCell</Method>
            </MethodBoundary>
            <MethodBoundary line="424" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.FormatCell</StatementMethod>
              <Statement>return FormatCell(cell, contents, cssClassName, string.Empty);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>stack1</OutputVariable>
              <InputVariable>stack2</InputVariable>
              <ActualInputVariable>contents</ActualInputVariable>
              <Method>Elmah.ErrorLogPage.FormatCell</Method>
            </MethodBoundary>
            <CallResult line="441" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.FormatCell</StatementMethod>
              <Statement>string encodedContents = this.Server.HtmlEncode(contents);</Statement>
              <StatementType>AssignmentStatement</StatementType>
              <OutputVariable>encodedContents</OutputVariable>
              <InputVariable>stack1</InputVariable>
              <ActualInputVariable>contents</ActualInputVariable>
              <Method>System.Web.HttpServerUtility.HtmlEncode</Method>
              <Argument>stack1</Argument>
            </CallResult>
            <MethodBoundary line="445" file="c:\work_651\ELMAH-1.2-sp2-src\src\Elmah\ErrorLogPage.cs">
              <StatementMethod>Elmah.ErrorLogPage.FormatCell</StatementMethod>
              <Statement>cell.Text = encodedContents;</Statement>
              <StatementType>ExpressionStatement</StatementType>
              <OutputVariable>stack0</OutputVariable>
              <InputVariable>encodedContents</InputVariable>
              <ActualInputVariable>encodedContents</ActualInputVariable>
              <Method>System.Web.UI.WebControls.TableCell.set_Text</Method>
            </MethodBoundary>
          </Transformations>
        </Result>
      </Results>
    </Rule>
    <Rule>
      <Name>File Canonicalization</Name>
      <Identifier>ACESEC03</Identifier>
      <TotalResults>0</TotalResults>
      <Results />
    </Rule>
    <Rule>
      <Name>Process Command Execution</Name>
      <Identifier>ACESEC02</Identifier>
      <TotalResults>0</TotalResults>
      <Results />
    </Rule>
  </Rules>
</Report>